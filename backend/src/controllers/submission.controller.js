// controllers/submission.controller.js

const sql = require("mssql");
const dbConfig = require("../config/db.config");

exports.createSubmission = async (req, res) => {
  const { formType, lotNo, templateIds, formData, submittedBy } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
  if (!formType || !templateIds || templateIds.length === 0 || !formData) {
    return res.status(400).send({ message: "Missing required fields." });
  }

  const pool = await sql.connect(dbConfig);
  const transaction = new sql.Transaction(pool);

  try {
    await transaction.begin();

    // --- üëá ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: "‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" Category ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô! üëá ---
    const categoryRequest = new sql.Request(transaction);
    const categoryResult = await categoryRequest
      .input("firstTemplateId", sql.Int, templateIds[0]) // ‡πÉ‡∏ä‡πâ templateId ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      .query(
        "SELECT template_category FROM Form_Master_Templates WHERE template_id = @firstTemplateId"
      );

    if (categoryResult.recordset.length === 0) {
      throw new Error(
        `Cannot find category for template ID: ${templateIds[0]}`
      );
    }
    const correctCategory = categoryResult.recordset[0].template_category; // üëà ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ('GEN_A' ‡∏´‡∏£‡∏∑‡∏≠ 'GEN_B')

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å form vs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" ---
    let versionSetId;

    // Query ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const findSetQuery = `
      SELECT vs.version_set_id
      FROM Form_Version_Sets vs
      WHERE vs.category = @categoryToUse AND vs.is_latest = 1
        AND (SELECT COUNT(DISTINCT vsi.template_id) FROM Form_Version_Set_Items vsi WHERE vsi.version_set_id = vs.version_set_id) = @templateCount
        AND NOT EXISTS (
          SELECT 1
          FROM (VALUES ${templateIds.map((id) => `(${id})`).join(",")}) AS t(id)
          WHERE t.id NOT IN (SELECT vsi.template_id FROM Form_Version_Set_Items vsi WHERE vsi.version_set_id = vs.version_set_id)
        )
    `;

    const findSetRequest = new sql.Request(transaction);
    const existingSet = await findSetRequest
      .input("categoryToUse", sql.NVarChar, correctCategory) // üëà ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      .input("templateCount", sql.Int, templateIds.length)
      .query(findSetQuery);

    if (existingSet.recordset.length > 0) {
      // *‡πÄ‡∏á‡∏∑‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡πÄ‡∏õ‡∏•‡∏á
      versionSetId = existingSet.recordset[0].version_set_id;
    } else {
      // *‡πÄ‡∏á‡∏∑‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
      // ‡∏õ‡∏¥‡∏î is_latest ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß
      const updateOldSetRequest = new sql.Request(transaction);
      await updateOldSetRequest
        .input("categoryToUse", sql.NVarChar, correctCategory) 
        .query(
          "UPDATE Form_Version_Sets SET is_latest = 0 WHERE category = @categoryToUse AND is_latest = 1"
        );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á version set ‡πÉ‡∏´‡∏°‡πà
      const getNewVersionRequest = new sql.Request(transaction);
      const lastVersionResult = await getNewVersionRequest
        .input("categoryToUse", sql.NVarChar, correctCategory) 
        .query(
          "SELECT ISNULL(MAX(version), 0) as lastVersion FROM Form_Version_Sets WHERE category = @categoryToUse"
        );
      const newVersion = lastVersionResult.recordset[0].lastVersion + 1;

      //‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Form_Version_Set_Items ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö "‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç" ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      const createSetRequest = new sql.Request(transaction);
      const newSetResult = await createSetRequest
        .input("categoryToUse", sql.NVarChar, correctCategory) 
        .input("newVersion", sql.Int, newVersion)
        .query(
          "INSERT INTO Form_Version_Sets (category, version, is_latest) OUTPUT INSERTED.version_set_id VALUES (@categoryToUse, @newVersion, 1)"
        );
      versionSetId = newSetResult.recordset[0].version_set_id;

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° items ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      for (const templateId of templateIds) {
        const createSetItemRequest = new sql.Request(transaction);
        await createSetItemRequest
          .input("versionSetId", sql.Int, versionSetId)
          .input("templateId", sql.Int, templateId)
          .query(
            "INSERT INTO Form_Version_Set_Items (version_set_id, template_id) VALUES (@versionSetId, @templateId)"
          );
      }
    }

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Submission 
    const submissionRequest = new sql.Request(transaction);
    const submissionResult = await submissionRequest
      .input("versionSetId", sql.Int, versionSetId)
      .input("formType", sql.NVarChar, formType) 
      .input("lotNo", sql.NVarChar, lotNo)
      .input("submittedBy", sql.NVarChar, submittedBy).query(`
        INSERT INTO Form_Submissions (version_set_id, form_type, lot_no, submitted_by) 
        OUTPUT INSERTED.submission_id 
        VALUES (@versionSetId, @formType, @lotNo, @submittedBy)
      `);
    const submissionId = submissionResult.recordset[0].submission_id;

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Form Data (JSON) ---
    const dataRequest = new sql.Request(transaction);
    await dataRequest
      .input("submissionId", sql.Int, submissionId)
      .input("formDataJson", sql.NVarChar(sql.MAX), JSON.stringify(formData))
      .query(`
        INSERT INTO Form_Submission_Data (submission_id, form_data_json) 
        VALUES (@submissionId, @formDataJson)
      `);

    await transaction.commit();
    res.status(201).send({
      message: "Form submitted successfully!",
      submissionId: submissionId,
    });
  } catch (err) {
    await transaction.rollback();
    console.error("!!! ERROR in createSubmission:", err); // üëà ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ Debug ‡πÅ‡∏•‡πâ‡∏ß
    res
      .status(500)
      .send({ message: "Failed to submit form.", error: err.message });
  }
};

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà 1: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Submission ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üéØ
exports.getAllSubmissions = async (req, res) => {
  try {
    const pool = await sql.connect(dbConfig);
    const { category } = req.query; // üëà ‡∏î‡∏∂‡∏á "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" category ‡∏°‡∏≤‡∏à‡∏≤‡∏Å URL

    // --- üëá ‡∏™‡∏£‡πâ‡∏≤‡∏á Query ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô üëá ---
    let baseQuery = `
            SELECT 
                fs.submission_id, fs.form_type, fs.lot_no, fs.submitted_at, fs.status,
                fs.submitted_by,
                fvs.category
            FROM 
                Form_Submissions AS fs
            LEFT JOIN 
                Form_Version_Sets AS fvs ON fs.version_set_id = fvs.version_set_id
        `;

    const request = pool.request();

    // --- üëá ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á category ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà üëá ---
    if (category) {
      baseQuery += ` WHERE fvs.category = @category`; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE
      request.input("category", sql.NVarChar, category); // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ category ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Query ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    }

    baseQuery += ` ORDER BY fs.submitted_at DESC`; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢

    const result = await request.query(baseQuery);

    res.status(200).send(result.recordset);
  } catch (err) {
    console.error("!!! ERROR in getAllSubmissions:", err);
    res
      .status(500)
      .send({ message: "Failed to retrieve submissions.", error: err.message });
  }
};

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà 2: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Submission ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î üéØ
exports.getSubmissionById = async (req, res) => {
  const { id } = req.params;

  try {
    const pool = await sql.connect(dbConfig);
    const request = new sql.Request(pool);

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å Submissions ‡πÅ‡∏•‡∏∞ Submission_Data
    const submissionResult = await request.input("submissionId", sql.Int, id)
      .query(`
                SELECT 
                    fs.submission_id,
                    fs.version_set_id,
                    fs.form_type,
                    fs.lot_no,
                    fs.submitted_by,
                    fs.submitted_at,
                    fsd.form_data_json
                FROM 
                    Form_Submissions fs
                JOIN 
                    Form_Submission_Data fsd ON fs.submission_id = fsd.submission_id
                WHERE 
                    fs.submission_id = @submissionId
            `);

    if (submissionResult.recordset.length === 0) {
      return res.status(404).send({ message: "Submission not found." });
    }

    const submissionData = submissionResult.recordset[0];
    const versionSetId = submissionData.version_set_id;

    // 2. ‡πÉ‡∏ä‡πâ version_set_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏≤ "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const blueprintResult = await request.input(
      "versionSetId",
      sql.Int,
      versionSetId
    ).query(`
                SELECT 
                    fmt.template_id,
                    fmt.template_name,
                    fmt.template_category,
                    fmt.version,
                    fmi.item_id,
                    fmi.display_order,
                    fmi.config_json
                FROM 
                    Form_Version_Set_Items fvsi
                JOIN 
                    Form_Master_Templates fmt ON fvsi.template_id = fmt.template_id
                JOIN 
                    Form_Master_Items fmi ON fvsi.template_id = fmi.template_id
                WHERE 
                    fvsi.version_set_id = @versionSetId
                ORDER BY
                    fmt.template_name, fmi.display_order
            `);

    // 3. ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÉ‡∏´‡πâ Frontend ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const blueprints = {};
    blueprintResult.recordset.forEach((item) => {
      const templateName = item.template_name;
      if (!blueprints[templateName]) {
        blueprints[templateName] = {
          template: {
            template_id: item.template_id,
            template_name: item.template_name,
            template_category: item.template_category,
            version: item.version,
          },
          items: [],
        };
      }
      blueprints[templateName].items.push({
        item_id: item.item_id,
        display_order: item.display_order,
        config_json: JSON.parse(item.config_json),
      });
    });

    // 4. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.status(200).send({
      submission: {
        ...submissionData,
        form_data_json: JSON.parse(submissionData.form_data_json),
      },
      blueprints: blueprints,
    });
  } catch (err) {
    res.status(500).send({
      message: "Failed to retrieve submission details.",
      error: err.message,
    });
  }
};

exports.deleteSubmission = async (req, res) => {
  // ‡∏î‡∏∂‡∏á 'id' ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏≤‡∏Å URL parameter
  const { id } = req.params;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á connection pool ‡πÉ‡∏´‡∏°‡πà ‡∏ï‡∏≤‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
  const pool = await sql.connect(dbConfig);
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction ‡∏à‡∏≤‡∏Å pool ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
  const transaction = new sql.Transaction(pool);

  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction
    await transaction.begin();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á request ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ transaction ‡∏ô‡∏µ‡πâ
    const request = new sql.Request(transaction);

    // ‡∏ú‡∏π‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ id ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö SQL query ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    request.input("submissionId", sql.Int, id);

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà 1: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏π‡∏Å (Form_Submission_Data) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    await request.query(
      "DELETE FROM Form_Submission_Data WHERE submission_id = @submissionId"
    );

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà 2: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏°‡πà (Form_Submissions)
    const result = await request.query(
      "DELETE FROM Form_Submissions WHERE submission_id = @submissionId"
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.rowsAffected[0] === 0) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ ID ‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      // ‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á commit transaction ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö
      await transaction.commit();
      return res
        .status(404)
        .send({ message: `Submission with ID ${id} not found.` });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ commit transaction (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö)
    await transaction.commit();

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å Frontend ‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ .send ‡∏ï‡∏≤‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    res
      .status(200)
      .send({ message: `Submission ID ${id} has been deleted successfully.` });
  } catch (err) {
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await transaction.rollback();
    // ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res
      .status(500)
      .send({ message: "Failed to delete submission.", error: err.message });
  }
};
