
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getSubmissionById, generatePdfById } from '../../services/submissionService';
import { fireToast } from '../../hooks/fireToast';
import Breadcrumb from '../../components/Breadcrumbs/Breadcrumb';


// -- Import Component ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ --
import ReportDetailBZ from './BZ/ReportDetailBZ';
import ReportDetailBZ3 from './BZ3/ReportDetailBZ3';
import ReportDetailBS3 from './BS3/ReportDetailBS3';
import ReportDetailAS2 from './AS2/ReportDetailAS2';
import ReportDetailBZ5_C from './BZ5-C/ReportDetailBZ5-C';
import ReportDetailBS5_C from './BS5-C/ReportDetailBS5-C';

const ReportDetailDispatcher: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [submissionData, setSubmissionData] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);

  useEffect(() => {

    if (!id) {
      console.error('[Dispatcher] Error: No ID found in URL.');
      setError("‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡πÉ‡∏ô URL");
      setIsLoading(false);
      return;
    }
    const fetchDetails = async () => {
      console.log(`[Dispatcher] Attempting to fetch data for ID: ${id}`);
      try {
        const data = await getSubmissionById(id); // ‡∏Ñ‡∏∑‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission
        setSubmissionData(data); // data ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á { submission: {...}, blueprints: [...] }
      } catch (err) {
        setError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: ${id} ‡πÑ‡∏î‡πâ`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDetails();
  }, [id]);

  // --- üëá 3. (‡πÄ‡∏û‡∏¥‡πà‡∏° Function) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Print PDF ---
  const handlePrintPdf = async () => {
    if (!id || isGeneratingPdf) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥

    setIsGeneratingPdf(true);
    console.log(`[Dispatcher] Initiating PDF generation for ID: ${id}`);
    try {
      const pdfBlob = await generatePdfById(id);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏à‡∏≤‡∏Å Blob
      const url = window.URL.createObjectURL(new Blob([pdfBlob], { type: 'application/pdf' }));

      // ‡πÄ‡∏õ‡∏¥‡∏î PDF ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
      const link = document.createElement('a');
      link.href = url;
      // link.setAttribute('download', `report_${id}.pdf`); // ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏¢
      link.setAttribute('target', '_blank'); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
      document.body.appendChild(link);
      link.click();

      console.log(`[Dispatcher] PDF opened in new tab for ID: ${id}`);

      // ‡∏•‡∏ö Link ‡πÅ‡∏•‡∏∞ URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß)
      link.parentNode?.removeChild(link);
      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô revoke ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô
      setTimeout(() => window.URL.revokeObjectURL(url), 100);

    } catch (err: any) {
      console.error(`[Dispatcher] Failed to generate PDF for ID ${id}:`, err);
      fireToast('error', `‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
    } finally {
      setIsGeneratingPdf(false);
      console.log(`[Dispatcher] PDF generation process finished for ID: ${id}`);
    }
  };
  // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Function handlePrintPdf ---


  const renderFormDetail = () => { // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Component ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° form_type 

    if (!submissionData) return <div>No submission data to render.</div>;

    const { submission, blueprints } = submissionData;

    switch (submission.form_type) {
      case 'BZ':
        return <ReportDetailBZ submission={submission} blueprints={blueprints} />;
      case 'BZ3':
        return <ReportDetailBZ3 submission={submission} blueprints={blueprints} />;
      case 'BS3':
        return <ReportDetailBS3 submission={submission} blueprints={blueprints} />;
      case 'BZ5-C':
        return <ReportDetailBZ5_C submission={submission} blueprints={blueprints} />;
      case 'BS5-C':
        return <ReportDetailBS5_C submission={submission} blueprints={blueprints} />;
      case 'AS2':
        return <ReportDetailAS2 submission={submission} blueprints={blueprints} />;
      default:
        return <div>‡πÑ‡∏°‡πà‡∏û‡∏ö Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Form Type: {submission.form_type}</div>;

    }
  };


  if (isLoading) {
    return <><div className="text-center p-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...</div></>;
  }
  if (error) {
    return <><div className="text-center p-4 text-red-500">{error}</div></>;
  }

  return (
    <>
      <Breadcrumb pageName={`‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï: ${submissionData?.submission?.form_type || ''}`} />
      <div className="mb-4 flex justify-end">
        <button
          onClick={handlePrintPdf}
          disabled={isGeneratingPdf} // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î PDF
          className={`flex items-center justify-center rounded bg-primary py-2 px-4 font-medium text-white hover:bg-opacity-90 disabled:cursor-not-allowed disabled:bg-opacity-50`}
        >
          {isGeneratingPdf ? (
            <>
              {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô Loading ‡∏´‡∏°‡∏∏‡∏ô‡πÜ */}
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF...
            </>
          ) : (
            'üìÑ ‡∏û‡∏¥‡∏°‡∏û‡πå PDF' // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
          )}
        </button>
      </div>
      <div>
        {renderFormDetail()}
      </div>
    </>
  );
};

export default ReportDetailDispatcher;