// src/pages/BS5-C_Form/FormStep2.tsx

import React, { useState, useEffect } from 'react';
import { UseFormWatch, UseFormSetValue, FieldErrors } from 'react-hook-form';
import { IManufacturingReportForm, IStep2ConfigJson } from '../../types';
import { useWeightingCalculation, WeightingCalculationConfig } from '../../../../../hooks/useWeightCalculations';
import { useTemplateLoader } from '../../../../../hooks/useTemplateLoader';
import RawMaterialTableRows from '../../../components/forms/RawMaterialTableRows';

// =================================================================
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë                     CUSTOM HOOKS (‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logic)            
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// =================================================================
// (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Type ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ñ‡∏π‡∏Å import ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
// ...

// Helper function to round intermediate calculations to prevent floating point errors.
// Using 8 decimal places is a safe precision.
// ‚ú® ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®
const roundSafe = (num: number | null): number | null => {
  if (num === null) return null;
  // This will turn 3.1557999999999997 into 3.1558
  const multiplier = 100000000; // 1e8
  return Math.round(num * multiplier) / multiplier;
};


// ‚ú® [EDIT 1/4] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Hook ‡πÄ‡∏õ‡πá‡∏ô BS5-C
const useBS5_CCalculations = (
  watch: UseFormWatch<IManufacturingReportForm>,
  setValue: UseFormSetValue<IManufacturingReportForm>
) => {
  // --- 1. ‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏Ñ‡πà‡∏≤ Input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å ---
  const rc417Total = watch('rc417Weighting.total'); // (S19 / P20)

  // (AD20)
  const rc417WaterContentMoisture = watch('bs5cCalculations.rc417WaterContentMoisture');
  // (S24)
  const netweightofwaterper = 649.814400000;

  const magnesiumHydroxide = watch('rawMaterials.magnesiumHydroxide');
  const activatedCarbon = watch('rawMaterials.activatedcarbon');
  const GypsumPlaster = watch('rawMaterials.gypsumplaster');

  const ncrGenmatsu = watch('rawMaterials.ncrGenmatsu.actual');
  const rc417WaterContent = watch('bs5cCalculations.rc417WaterContentMoisture'); // (P21)
  const stdMeanMoisture = watch('bs5cCalculations.stdMeanMoisture');
  const naclWater = watch('bs5cCalculations.naclWater');
  const naclWaterSpecGrav = watch('bs5cCalculations.naclWaterSpecGrav');

  // --- "‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á" ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô hook ‡∏ô‡∏µ‡πâ) ---
  // const totalWeightOfMaterials = watch('bs5cCalculations.totalWeightOfMaterials');

  useEffect(() => {
    // ==========================================================
    // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Input ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    // ==========================================================
    console.log('[BS5-C DEBUG] --- 1. PARSING INPUTS ---');
    const numRc417Total = Number(rc417Total) || 0; // (S19 / P20)
    console.log(`[BS5-C DEBUG] Parsed numRc417Total (S19/P20): ${numRc417Total}`);

    // ‚ú® [EDIT 2/4] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Parse ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£ BS5-C (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Type Error)
    // (AD20)
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'number' ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN


    // (S24)
    const numS24 = Number(netweightofwaterper) || 0;
    console.log(`[BS5-C DEBUG] Parsed numS24: ${numS24}`);


    const numMagnesiumHydroxide = Number(magnesiumHydroxide) || 0;
    const numActivatedCarbon = Number(activatedCarbon) || 0;
    const numGypsumPlaster = Number(GypsumPlaster) || 0;
    const numNcrGenmatsu = Number(ncrGenmatsu) || 0;
    console.log(`[BS5-C DEBUG] Parsed Others: Mg(OH)2=${numMagnesiumHydroxide}, Carbon=${numActivatedCarbon}, Gypsum=${numGypsumPlaster}, NCR=${numNcrGenmatsu}`);
    console.log('[BS5-C DEBUG] --- END PARSING ---');


    // ==========================================================
    // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    // ==========================================================

    // ----- [NEW ‚ú®] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "CDZ-1:WaterContant(weight)" (P22) -----
    // (‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• P22 ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏π‡∏ï‡∏£ [B] ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ P22 ‡πÅ‡∏•‡πâ‡∏ß)
    // (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: calculatedWaterContentWeight_RAW)
    // ----------------------------------------------------------
    console.log('[BS5-C DEBUG] --- Block [P22] Start ---');
    let calculatedWaterContentWeight_RAW: number | null = null;

    if (rc417WaterContent) {
      const P20 = numRc417Total;
      const P21_decimal = (Number(rc417WaterContent) / 100) || 0;
      console.log(`[BS5-C DEBUG] [P22] Inputs: P20=${P20}, P21_decimal=${P21_decimal}`);
      const rawResult = P20 * P21_decimal;
      console.log(`[BS5-C DEBUG] [P22] Output (True RAW): ${rawResult}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
      calculatedWaterContentWeight_RAW = roundSafe(rawResult); // ‚ú® ROUNDED
    }
    console.log(`[BS5-C DEBUG] [P22] Output (Rounded): ${calculatedWaterContentWeight_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    setValue(
      'bs5cCalculations.rc417WaterContentweight',
      calculatedWaterContentWeight_RAW !== null ? Number(calculatedWaterContentWeight_RAW.toFixed(2)) : null
    );
    // ----------------------------------------------------------


    // ----- [A] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "Weight of CDZ-1 + Mg(OH)2 + Activated Carbon P-200U" -----
    // (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: calculatedTotalMaterials_RAW)
    // ----------------------------------------------------------
    console.log('[BS5-C DEBUG] --- Block [A] Start ---');
    console.log(`[BS5-C DEBUG] [A] Inputs: numRc417Total=${numRc417Total}, numMagnesiumHydroxide=${numMagnesiumHydroxide}, numActivatedCarbon=${numActivatedCarbon}, numGypsumPlaster=${numGypsumPlaster}`);
    const rawResult_A = numRc417Total + numMagnesiumHydroxide + numActivatedCarbon + numGypsumPlaster; // ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö
    console.log(`[BS5-C DEBUG] [A] Output (True RAW): ${rawResult_A}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
    const calculatedTotalMaterials_RAW = roundSafe(rawResult_A) || 0; // ‚ú® ROUNDED
    console.log(`[BS5-C DEBUG] [A] Output (Rounded): ${calculatedTotalMaterials_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    setValue(
      'bs5cCalculations.totalWeightOfMaterials',
      calculatedTotalMaterials_RAW > 0 ? calculatedTotalMaterials_RAW.toFixed(2) : null
    );
    // ----------------------------------------------------------


    // ‚ú®‚ú®‚ú® [EDIT 4/4] ‡∏ö‡∏•‡πá‡∏≠‡∏Å [B] ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á BS5-C ‚ú®‚ú®‚ú®
    // ----- [B] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Salt =(S19-AD20)*(S24/AD19)*(O23/(1-O23)) --- (BS5-C NEW) ---
    // (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: rawInitialNaclWater15_RAW)
    // --------------------------------------------------------------------------
    console.log('[BS5-C DEBUG] --- Block [B] Start (NEW FORMULA) ---');
    let rawInitialNaclWater15_RAW: number | null = null;

    // S19 = rc417Weighting.total (P20 ‡πÄ‡∏î‡∏¥‡∏°)
    const S19 = numRc417Total;

    // AD20 = bs5cCalculations.rc417WaterContentMoisture (Parsed)
    // (‡πÉ‡∏ä‡πâ numAD20 ‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1)

    // S24 = bs5cCalculations.Netweightofwaterper (Parsed)
    // (‡πÉ‡∏ä‡πâ numS24 ‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1)



    // IF(AD20="",""...) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AD20 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null




    // AD19 = 1000
    const AD19 = 1000;
    const numAD20 = calculatedWaterContentWeight_RAW || 0;
    console.log(`[BS5-C DEBUG] [B] Inputs: S19=${S19}, numAD20=${numAD20}, numS24=${numS24}`);
    // O23 = 4.00%
    const O23_percent = 4.0;
    const O23_decimal = O23_percent / 100;
    console.log(`[BS5-C DEBUG] [B] Constants: AD19=${AD19}, O23_decimal=${O23_decimal}`);

    // (S19-AD20)
    const part1 = (S19 - numAD20);
    console.log(`[BS5-C DEBUG] [B] part1 (S19 - AD20): ${part1}`);
    // (S24/AD19)
    const part2 = (numS24 / AD19);
    console.log(`[BS5-C DEBUG] [B] part2 (S24 / AD19): ${part2}`);
    // (O23/(1-O23))
    const part3 = (O23_decimal / (1 - O23_decimal));
    console.log(`[BS5-C DEBUG] [B] part3 (O23_decimal / (1 - O23_decimal)): ${part3}`);

    const rawResult_B = part1 * part2 * part3;
    console.log(`[BS5-C DEBUG] [B] rawResult_B (True RAW): ${rawResult_B}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
    rawInitialNaclWater15_RAW = roundSafe(rawResult_B); // ‚ú® ROUNDED

    console.log(`[BS5-C DEBUG] [B] Output (Rounded): ${rawInitialNaclWater15_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ----------------------------------------------------------
    // ‚ú®‚ú®‚ú® ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å [B] ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú®‚ú®‚ú®


    // ----- [C] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (Intermediate Value) -----
    // (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: rawIntermediateWater_RAW)
    // (Logic ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å [B] ‡πÉ‡∏´‡∏°‡πà)
    // ----------------------------------------------------------
    console.log('[BS5-C DEBUG] --- Block [C] Start ---');
    let rawIntermediateWater_RAW: number | null = null;
    if (rawInitialNaclWater15_RAW !== null) { // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [B]
      const T24_raw = rawInitialNaclWater15_RAW;
      const O23_decimal_for_intermediate = (Number(naclWater) / 100) || 0;
      console.log(`[BS5-C DEBUG] [C] Inputs: T24_raw (from B rounded)=${T24_raw}, O23_decimal (from naclWater)=${O23_decimal_for_intermediate}`);

      if (O23_decimal_for_intermediate !== 0) {
        const rawResult_C = (T24_raw / O23_decimal_for_intermediate) * (1 - O23_decimal_for_intermediate); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö
        console.log(`[BS5-C DEBUG] [C] Output (True RAW): ${rawResult_C}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
        rawIntermediateWater_RAW = roundSafe(rawResult_C); // ‚ú® ROUNDED
      } else {
        console.log('[BS5-C DEBUG] [C] Skipped (O23_decimal_for_intermediate is 0).');
      }
    } else {
      console.log('[BS5-C DEBUG] [C] Skipped (rawInitialNaclWater15_RAW is null).');
    }
    console.log(`[BS5-C DEBUG] [C] Output (Rounded): ${rawIntermediateWater_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ----------------------------------------------------------


    // ----- [D] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "Total NaCl water" -----
    // (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: totalNaclWaterResult_RAW)
    // (Logic ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å [B] ‡πÅ‡∏•‡∏∞ [C] ‡πÉ‡∏´‡∏°‡πà)
    // ----------------------------------------------------------
    console.log('[BS5-C DEBUG] --- Block [D] Start ---');
    let totalNaclWaterResult_RAW: number | null = null;
    if (rc417WaterContent) { // (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ P21 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
      const T24_raw_final = rawInitialNaclWater15_RAW || 0; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [B]
      const AD24_raw_final = rawIntermediateWater_RAW || 0; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [C]
      console.log(`[BS5-C DEBUG] [D] Inputs: T24_raw_final (from B rounded)=${T24_raw_final}, AD24_raw_final (from C rounded)=${AD24_raw_final}`);
      const rawResult_D = T24_raw_final + AD24_raw_final;
      console.log(`[BS5-C DEBUG] [D] Output (True RAW): ${rawResult_D}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
      totalNaclWaterResult_RAW = roundSafe(rawResult_D); // ‚ú® ROUNDED
    } else {
      console.log('[BS5-C DEBUG] [D] Skipped (rc417WaterContent is falsy).');
    }
    console.log(`[BS5-C DEBUG] [D] Output (Rounded): ${totalNaclWaterResult_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    setValue(
      'bs5cCalculations.totalNaclWater',
      totalNaclWaterResult_RAW !== null ? Number(totalNaclWaterResult_RAW.toFixed(2)) : null
    );
    // ----------------------------------------------------------


    // ----- [E] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Results) -----
    console.log('[BS5-C DEBUG] --- Block [E] Start ---');

    // [E-1] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "15% NaCl Water" (L) ‡πÅ‡∏•‡∏∞ (L/B)/20 min.
    let finalNaclWater4Result_RAW: number | null = null;
    const W23 = Number(naclWaterSpecGrav) || 0;
    console.log(`[BS5-C DEBUG] [E-1] Input: W23 (naclWaterSpecGrav)=${W23}`);
    if (naclWaterSpecGrav && W23 !== 0) {
      const totalNaclForFinal = totalNaclWaterResult_RAW || 0; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [D]
      console.log(`[BS5-C DEBUG] [E-1] Input: totalNaclForFinal (from D rounded)=${totalNaclForFinal}`);
      const rawResult_E1 = totalNaclForFinal / W23;
      console.log(`[BS5-C DEBUG] [E-1] Output (True RAW L): ${rawResult_E1}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
      finalNaclWater4Result_RAW = roundSafe(rawResult_E1); // ‚ú® ROUNDED
    } else {
      console.log('[BS5-C DEBUG] [E-1] Skipped (W23 is 0 or missing).');
    }
    console.log(`[BS5-C DEBUG] [E-1] Output (Rounded L): ${finalNaclWater4Result_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (L)
    setValue(
      'bs5cCalculations.naclWater4',
      finalNaclWater4Result_RAW !== null ? Number(finalNaclWater4Result_RAW.toFixed(0)) : null
    );
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sodiumChloride)
    setValue(
      'rawMaterials.sodiumChloride',
      finalNaclWater4Result_RAW !== null ? Number(finalNaclWater4Result_RAW.toFixed(0)) : null,
      { shouldValidate: true }
    );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "(L/B)/20 min."
    const rawResult_LMin = (finalNaclWater4Result_RAW || 0) / 20; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [E-1]
    console.log(`[BS5-C DEBUG] [E-1] Output (L/min True RAW): ${rawResult_LMin}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
    const lminRate_RAW = roundSafe(rawResult_LMin) || 0; // ‚ú® ROUNDED
    console.log(`[BS5-C DEBUG] [E-1] Output (L/min Rounded): ${lminRate_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÉ‡∏ä‡πâ Math.round() ‡πÅ‡∏Å‡πâ Type Error)
    setValue(
      'bs5cCalculations.lminRate',
      lminRate_RAW > 0 ? String(Math.round(lminRate_RAW)) : '',
    );

    // [E-2] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "Total weight = NCR Genmatsu"
    let totalWeightWithNcrResult_RAW: number | null = null;
    if (totalNaclWaterResult_RAW !== null) { // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [D]
      const AD21_final = calculatedTotalMaterials_RAW || 0; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [A]
      const AD25_final = totalNaclWaterResult_RAW || 0; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å [D]
      const U14_final = numNcrGenmatsu;
      console.log(`[BS5-C DEBUG] [E-2] Inputs: AD21 (from A rounded)=${AD21_final}, AD25 (from D rounded)=${AD25_final}, U14 (NCR)=${U14_final}`);
      const rawResult_E2 = AD21_final + AD25_final + U14_final;
      console.log(`[BS5-C DEBUG] [E-2] Output (True RAW): ${rawResult_E2}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
      totalWeightWithNcrResult_RAW = roundSafe(rawResult_E2); // ‚ú® ROUNDED
    } else {
      console.log('[BS5-C DEBUG] [E-2] Skipped (totalNaclWaterResult_RAW is null).');
    }
    console.log(`[BS5-C DEBUG] [E-2] Output (Rounded): ${totalWeightWithNcrResult_RAW}`); // üëà Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    setValue(
      'bs5cCalculations.totalWeightWithNcr',
      totalWeightWithNcrResult_RAW !== null ? Number(totalWeightWithNcrResult_RAW.toFixed(2)) : null
    );
    console.log('[BS5-C DEBUG] --- ALL CALCULATIONS FINISHED ---');

  }, [
    // --- Dependencies ---
    rc417Total,
    rc417WaterContentMoisture, // (AD20)
    netweightofwaterper, // (S24)
    magnesiumHydroxide,
    activatedCarbon,
    GypsumPlaster,
    ncrGenmatsu,
    rc417WaterContent, // (P21)
    stdMeanMoisture,
    naclWater,
    naclWaterSpecGrav,
    setValue
  ]);
};

// =================================================================
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë                     MAIN COMPONENT (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)                
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// =================================================================
interface FormStep2Props {
  register: any;
  watch: UseFormWatch<IManufacturingReportForm>;
  setValue: UseFormSetValue<IManufacturingReportForm>;
  errors: FieldErrors<IManufacturingReportForm>;
  onTemplateLoaded: (templateInfo: any) => void;
  staticBlueprint?: any;
}

// üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: bs5cWeightingConfig ‡∏ô‡∏µ‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å BS3
// ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö BZ5-C ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö
const bs5cWeightingConfig: WeightingCalculationConfig = {
  rows: [
    { grossWeightPath: 'rc417Weighting.row1.weight', netWeightPath: 'rc417Weighting.row1.net', tare: 2 },
    { grossWeightPath: 'rc417Weighting.row2.weight', netWeightPath: 'rc417Weighting.row2.net', tare: 2 },
  ],
  totalPath: 'rc417Weighting.total',
  destinationPath: 'rawMaterials.diaEarth', // üëà (‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô rawMaterials.rc417Total ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á BZ5-C)
};

const FormStep2: React.FC<FormStep2Props> = ({
  register,
  watch,
  setValue,
  errors,
  onTemplateLoaded,
  staticBlueprint
}) => {

  const { fields, isLoading, error } = useTemplateLoader({
    templateName: 'BS5-C_Step2_RawMaterials', // (‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    onTemplateLoaded,
    staticBlueprint,
  });

  // üìå Hook 2 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ
  useWeightingCalculation(watch, setValue, bs5cWeightingConfig);

  // ‚ú® [EDIT 5/5] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Hook ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
  useBS5_CCalculations(watch, setValue);

  // --- (CSS Classes) ---
  const inputClass = "w-full rounded-lg border-[1.5px] border-stroke bg-transparent px-3 py-2 text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary";
  const disabledInputClass = "w-full cursor-default rounded-lg border-[1.5px] border-stroke bg-slate-100 px-3 py-2 text-slate-500 outline-none dark:border-form-strokedark dark:bg-slate-800 dark:text-slate-400"; // ‡πÅ‡∏Å‡πâ 1.Spx ‡πÄ‡∏õ‡πá‡∏ô 1.5px
  const thClass = "border-b border-stroke px-4 py-3 text-center font-medium text-black dark:border-strokedark dark:text-white";
  const tdClass = "border-b border-stroke px-4 py-3 text-black dark:border-strokedark dark:text-white";
  const tdCenterClass = `${tdClass} text-center align-middle`;
  const tdLeftClass = `${tdClass} align-middle`;
  // --- (End CSS Classes) ---


  return (
    <div>
      <div className="border-b-2 border-stroke py-2 text-center dark:border-strokedark">
        <h5 className="font-medium text-black dark:text-white">Quantity of used raw material</h5>
      </div>
      <div className="rounded-b-sm border border-t-0 border-stroke p-5 dark:border-strokedark">
        <div className="mb-6 overflow-x-auto">
          <table className="w-full table-auto">
            <thead>
              <tr className="bg-gray-2 text-left dark:bg-meta-4">
                <th className={`${thClass}`} colSpan={2}>Raw Material Name</th>
                <th className={thClass}>STD</th>
                <th className={thClass}>Actual Weight</th>
                <th className={thClass}>Unit</th>
              </tr>
            </thead>
            <tbody>
              {isLoading && (<tr><td colSpan={5} className="text-center p-4">Loading Master Form...</td></tr>)}
              {error && (<tr><td colSpan={5} className="text-center p-4 text-red-500">{error}</td></tr>)}

              {/* üëá ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Component ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
              {!isLoading && !error && <RawMaterialTableRows fields={fields} register={register} errors={errors} />}

            </tbody>
          </table>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <tbody>
              {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å CDZ-1 --- */}
              <tr>
                <td className={tdLeftClass}>CDZ-1 : Weight</td>
                <td className={tdLeftClass}><input type="number" className={inputClass} {...register('rc417Weighting.row1.weight', { valueAsNumber: true, required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å  CDZ-1 : Weight' })} /></td>
                {errors.rc417Weighting?.row1?.weight &&
                  <p className="text-sm text-danger mt-1">
                    {errors.rc417Weighting.row1.weight.message}
                  </p>
                }
                <td className={tdLeftClass}>Bag No.</td>
                <td className={tdLeftClass}><input type="text" className={inputClass} {...register('rc417Weighting.row1.bagNo')} /></td>
                <td className={tdLeftClass}>Net Weight</td>
                <td className={tdLeftClass}><input type="number" className={disabledInputClass} readOnly disabled {...register('rc417Weighting.row1.net')} /></td>
              </tr>
              <tr>
                <td className={tdLeftClass}>CDZ-1 : Weight</td>
                <td className={tdLeftClass}><input type="number" className={inputClass} {...register('rc417Weighting.row2.weight', { valueAsNumber: true, required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å CDZ-1 : Weight' })} /></td>
                {errors.rc417Weighting?.row2?.weight &&
                  <p className="text-sm text-danger mt-1">
                    {errors.rc417Weighting.row2.weight.message}
                  </p>
                }
                <td className={tdLeftClass}>Bag No.</td>
                <td className={tdLeftClass}><input type="text" className={inputClass} {...register('rc417Weighting.row2.bagNo')} /></td>
                <td className={tdLeftClass}>Net Weight</td>
                <td className={tdLeftClass}><input type="number" className={disabledInputClass} readOnly disabled {...register('rc417Weighting.row2.net')} /></td>
              </tr>
              <tr>
                <td className={tdLeftClass}>CDZ-1 :Total Weight</td>
                <td className={tdLeftClass}><input type="number" className={disabledInputClass} readOnly disabled {...register('rc417Weighting.total')} /></td>

                <td className={tdLeftClass}>Net Weight of Yield</td>
                <td className={tdLeftClass}><div className="flex items-center"><input type="text" className={disabledInputClass} readOnly value="1000" /><span className="ml-2">KG</span></div> </td>
                <td className={tdLeftClass}>CDZ-1 of AD</td>
                <td className={tdLeftClass}><div className="flex items-center"><input type="text" className={inputClass} {...register('rc417Weighting.cdz1ofad', { valueAsNumber: true, required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å CDZ-1 of AD' })} /><span className="ml-2">g/mL</span></div> </td>
              </tr>

              {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BZ5-C --- */}
              <tr>
                <td className={tdLeftClass}>CDZ-1:WaterContent(Moisture)</td>
                <td className={tdLeftClass}> <div className="flex items-center"> <input type="number" className={inputClass} {...register('bs5cCalculations.rc417WaterContentMoisture', { valueAsNumber: true })} /><span className="ml-2">%</span></div> </td>
                <td className={tdLeftClass}> <span className="text-xs"> Weight of CDZ-1 + Mg(OH)<sub>2</sub> <br /> + Carbon </span> </td>
                <td className={tdLeftClass}><div className="flex items-center"><input type="text" className={disabledInputClass} readOnly {...register('bs5cCalculations.totalWeightOfMaterials')} /><span className="ml-2">KG</span></div> </td>
                <td className={tdLeftClass}></td>
                <td className={tdLeftClass}></td>
              </tr>
              <tr>
                <td className={tdLeftClass}>CDZ-1:WaterContant(weight)</td>
                <td className={tdLeftClass}> <div className="flex items-center"> <input type="number" className={disabledInputClass} readOnly  {...register('bs5cCalculations.rc417WaterContentweight', { valueAsNumber: true })} /><span className="ml-2">%</span></div> </td>
                <td className={tdLeftClass} colSpan={4}></td>
              </tr>
              <tr>
                <td className={tdLeftClass}>% Moisture Gen B (STD mean.)</td>
                <td className={tdLeftClass}> <div className="flex items-center"> <input type="number" className={disabledInputClass} {...register('bs5cCalculations.stdMeanMoisture', { valueAsNumber: true })} value="37" readOnly disabled /><span className="ml-2">%</span></div> </td>
                <td className={tdLeftClass} colSpan={4}></td>
              </tr>
              <tr>
                <td className={tdLeftClass}>NaCl water =</td>
                <td className={tdLeftClass}> <div className="flex items-center"> <input type="number" className={disabledInputClass} {...register('bs5cCalculations.naclWater', { valueAsNumber: true })} value="4" readOnly disabled /><span className="ml-2">%</span></div> </td>
                <td className={tdLeftClass}>NaCl Water Specific gravity</td>
                <td className={tdLeftClass}><input type="text" className={inputClass} {...register('bs5cCalculations.naclWaterSpecGrav', { valueAsNumber: true, required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å  NaCl Water Specific gravity' })} /></td>
                {errors.bs5cCalculations?.naclWaterSpecGrav &&
                  <p className="text-sm text-danger mt-1">
                    {errors.bs5cCalculations.naclWaterSpecGrav.message}
                  </p>
                }
                <td className={tdLeftClass}>Temperature</td>
                <td className={tdLeftClass}><input type="number" step="0.1" className={inputClass} {...register('bs5cCalculations.temperature', { valueAsNumber: true })} /></td>
                <td className={tdLeftClass}>C¬∞</td>
              </tr>
              <tr>
                <td className={tdLeftClass}>Net weight of water per <br></br>1000 Kg of CDZ-1 =</td>
                <td className={tdLeftClass}> <div className="flex items-center"> <input type="number" className={disabledInputClass} {...register('bs5cCalculations.Netweightofwaterper', { valueAsNumber: true })} value="649.8" readOnly disabled /><span className="ml-2">%</span></div> </td>
                <td className={tdLeftClass}> <span className="text-xs">(Calculated by 4% NaCl 654L, Specific gravity = 1.035) </span> </td>
              </tr>
              <tr>
                <td className={tdLeftClass}>Total NaCl water=</td>
                <td className={tdLeftClass}><input type="number" step="0.1" className={disabledInputClass} readOnly {...register('bs5cCalculations.totalNaclWater', { valueAsNumber: true })} /></td>
                <td className={tdLeftClass}>Kg./B</td>
              </tr>
              <tr>
                <td className={tdLeftClass}>15% NaCl Water</td>
                <td className={tdLeftClass}><input type="number" className={disabledInputClass} {...register('bs5cCalculations.naclWater4', { valueAsNumber: true })} readOnly disabled /></td>
                <td className={tdLeftClass}>(L/B)/20 min. =</td>
                <td className={tdLeftClass}><input type="text" className={disabledInputClass} readOnly {...register('bs5cCalculations.lminRate')} /></td>
                <td className={tdLeftClass}>'L/min </td>
              </tr>
              <tr>
                <td className={tdLeftClass}>Total weight = NCR Genmatsu =</td>
                <td className={tdLeftClass}><input type="number" step="0.1" className={disabledInputClass} readOnly {...register('bs5cCalculations.totalWeightWithNcr', { valueAsNumber: true })} /></td>
                <td className={tdLeftClass}>Kg. </td>
              </tr>

              {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ --- */}
              <tr>
                <td className={tdLeftClass}>Remark (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏) :</td>
                <td className={tdLeftClass} colSpan={5}><textarea className={`${inputClass} h-25`} {...register('qouRemark')} /></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default FormStep2;