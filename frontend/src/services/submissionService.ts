// lo
import apiClient from './apiService';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend API
 * @param submissionData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
export const submitProductionForm = async (submissionData: any) => {
  try {
    // ‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà /api/submissions ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Proxy ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏° http://localhost:4000 ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    const response = await apiClient.post('/api/submissions', submissionData);
    return response.data;
  } catch (error) {
    console.error("Error submitting form:", error);
    throw error;
  }
};


export const getAllSubmissions = async (category?: string) => { // üëà ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á category ‡πÑ‡∏î‡πâ
  try {
    // --- üëá ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) üëá ---
    const url = category ? `/api/submissions?category=${category}` : '/api/submissions';

    console.log(`Fetching submissions from: ${url}`); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å URL ‡πÑ‡∏´‡∏ô

    const response = await apiClient.get(url);
    return response.data;
  } catch (error) {
    console.error("Error fetching all submissions:", error);
    throw error;
  }
};


export const getSubmissionById = async (id: string) => {
  try {
    const response = await apiClient.get(`/api/submissions/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching submission with id ${id}:`, error);
    throw error;
  }
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö Submission ‡∏î‡πâ‡∏ß‡∏¢ ID
export const deleteSubmission = async (id: number): Promise<{ message: string }> => {
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ apiClient.delete ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const response = await apiClient.delete<{ message: string }>(`/api/submissions/${id}`);
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return response.data;
  } catch (error) {
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î Error, ‡πÇ‡∏¢‡∏ô Error ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Component ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    console.error(`Error deleting submission with id ${id}:`, error);
    throw error;
  }
};



// ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ‚ú®
/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Submission ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 * @param id ID ‡∏Ç‡∏≠‡∏á submission ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @param data ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @returns Promise<any>
 */
export const updateSubmission = async (id: string, data: any): Promise<any> => {
  try {
    const response = await apiClient.put(`/api/submissions/${id}`, data);
    return response.data;
  } catch (error) {
    console.error(`Error updating submission with id ${id}:`, error);
    throw error;
  }
};


// --- üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ---
export const generatePdfById = async (id: string): Promise<Blob> => {
  try {
    console.log(`[submissionService] Requesting PDF generation for ID: ${id}`);
    const response = await apiClient.get(`/api/submissions/print/${id}`, {
      responseType: 'blob', // üëà ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ axios ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå (Blob)
    });
    console.log(`[submissionService] PDF Blob received for ID: ${id}`);
    return response.data; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Blob ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  } catch (error: any) {
    console.error(`[submissionService] Error generating PDF for ID ${id}:`, error.response?.data || error.message);
    // ‡πÇ‡∏¢‡∏ô error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Component ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏™‡∏î‡∏á Toast)
    throw new Error(error.response?.data?.message || `Failed to generate PDF for submission ${id}`);
  }
};
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ---